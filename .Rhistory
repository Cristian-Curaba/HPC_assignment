hist.scott(y)
glm(y~u**2+u)
plot(3.5*u**3-20*u*u+0.5*u+20)
lines(fitted(mod) ~ u, data = parabola, col = "red")
lines(fitted(mod) ~ u, col = "red")
mod<-glm(y~u**2+u)
plot(3.5*u**3-20*u*u+0.5*u+20)
lines(fitted(mod) ~ u, col = "red")
plot(mod)
plot(mod)
return()
mod<-glm(y~u)
plot(3.5*u**3-20*u*u+0.5*u+20)
plot(mod)
<Return>
mod<-glm(y~u)
mod
plot(mod)
mod
mod<-glm(y~u**2+u)
mod
mod<-glm(y~u**3+u**2+u)
mod
mod<-glm(y~u**3+u**2+u)
mod
mod<-glm(y~ u**3 + u**2 + u)
mod
mod<-glm(y~ u**3 + u**2 + u, data=u)
typeof(u)
u
mod<-glm(y~ u**3 + u**2 + u, data=as.dataframe(u))
mod<-glm(y~ u**3 + u**2 + u, data=as.data.frame(u))
mod
mod<-glm(y~ u**2 , data=as.data.frame(u))
mod
data<-data_frame(u,u*u,u**3)
data_frame()
?data_frame
data<-data.frame(u, u*u)
data<-data.frame(y, u, u*u)
mod<-glm(y~.  , data=as.data.frame(u))
mod
mod<-glm(y~.  , data=data1)
data1<-data.frame(y, u, u*u)
mod<-glm(y~.  , data=data1)
mod
data1<-data.frame(y, u, u*u, u**3)
mod<-glm(y~.  , data=data1)
mod
data1
plot(mod)
mod<-glm(y~.  , data=data1)
summary(mod)
meanconditioned1<-function(x){return (3.5*x**3-20*x*x+0.5*x+20)}
meanconditioned1<-function(x){return (3.5*x**3 - 20*x*x + 0.5*x + 20)}
n<-300
u<-runif(n, -4, +4)
y<-u
for (i in 1:n){
y[i]<- rnorm(1, mean=meanconditioned1(u),30)}
hist.scott(y)
typeof(u)
data1<-data.frame(y, u, u*u, u**3)
mod<-glm(y~.  , data=data1)
summary(mod)
hist.scott(y)
plot(y)
for (i in 1:n){
y[i]<- rnorm(1, mean=meanconditioned1(u[i]), 30)
}
hist.scott(y)
plot(y)
data1<-data.frame(y, u, u*u, u**3)
mod<-glm(y~.  , data=data1)
summary(mod)
n<-30
u<-runif(n, -4, +4)
y<-u
for (i in 1:n){
y[i]<- rnorm(1, mean=meanconditioned1(u[i]), 30)
}
hist.scott(y)
plot(y)
data1<-data.frame(y, u, u*u, u**3)
mod<-glm(y~.  , data=data1)
summary(mod)
hist.scott(y)
plot(3.5*u**3-20*u*u+0.5*u+20)
hist.scott(y)
hist.FD(y)
data1<-data.frame(y, u, u*u, u)
mod<-glm(y~.  , data=data1)
summary(mod)
data1<-data.frame(y, u, u*u,)
mod<-glm(y~.  , data=data1)
summary(mod)
data1<-data.frame(y, u, u*u)
mod<-glm(y~.  , data=data1)
summary(mod)
data1<-data.frame(y, u, u*u, u**3)
mod<-glm(y~.  , data=data1)
summary(mod)
data1<-data.frame(y, u, u*u, u**3, u**4)
mod<-glm(y~.  , data=data1)
summary(mod)
?glm
summary(mod)
meanconditioned2<-function(x){return (0.5*x**3-20*x*x+0.5*x+20)}
meanconditioned1<-function(x){return (3.5*x**3 - 20*x*x + 0.5*x + 20)}
meanconditioned2<-function(x){return (0.5*x**3-20*x*x+0.5*x+20)}
n<-30 #sample size
u<-runif(n, -4, +4) #unif sample
y<-u #inizialize y
#calculating the conditional distribution with meanconditioned1
for (i in 1:n){
y1[i]<- rnorm(1, mean=meanconditioned2(u[i]), 30)
}
meanconditioned1<-function(x){return (3.5*x**3 - 20*x*x + 0.5*x + 20)}
meanconditioned2<-function(x){return (0.5*x**3-20*x*x+0.5*x+20)}
n<-30 #sample size
u<-runif(n, -4, +4) #unif sample
y1<-u #inizialize y1
#calculating the conditional distribution with meanconditioned1
for (i in 1:n){
y1[i]<- rnorm(1, mean=meanconditioned2(u[i]), 30)
}
#building the data.fram with high order (4) and low order (2)
data1high<-data.frame(y, u, u*u, u**3, u**4)
data1low<-data.frame(y,u,u*u)
#fitting
modhigh<-glm(y1~.  , family= gaussian, data=data1high)
modlow<--glm(y1~.  , family= gaussian, data=data1low)
meanconditioned1<-function(x){return (3.5*x**3 - 20*x*x + 0.5*x + 20)}
meanconditioned2<-function(x){return (0.5*x**3-20*x*x+0.5*x+20)}
n<-30 #sample size
u<-runif(n, -4, +4) #unif sample
y1<-u #inizialize y1
#calculating the conditional distribution with meanconditioned1
for (i in 1:n){
y1[i]<- rnorm(1, mean=meanconditioned2(u[i]), 30)
}
#building the data.fram with high order (4) and low order (2)
data1high<-data.frame(y, u, u*u, u**3, u**4)
data1low<-data.frame(y,u,u*u)
#fitting
modhigh<-glm(y1~.  , family= gaussian, data=data1high)
modlow<--glm(y1~.  , family= gaussian, data=data1low)
#building the data.fram with high order (4) and low order (2)
data1high<-data.frame(y1, u, u*u, u**3, u**4)
data1low<-data.frame(y1,u,u*u)
#fitting
modhigh<-glm(y1~.  , family= gaussian, data=data1high)
modlow<--glm(y1~.  , family= gaussian, data=data1low)
modlow<-glm(y1~.  , family= gaussian, data=data1low)
#Showing the summary
summary(modhigh)
summary(modlow)
#Showing the summary
summary(modhigh)
summary(modlow)
meanconditioned1<-function(x){return (3.5*x**3 - 20*x*x + 0.5*x + 20)}
meanconditioned2<-function(x){return (0.5*x**3-20*x*x+0.5*x+20)}
set.seed(123)
n<-30 #sample size
u<-runif(n, -4, +4) #unif sample
y1<-u #inizialize y1
#calculating the conditional distribution with meanconditioned1
for (i in 1:n){
y1[i]<- rnorm(1, mean=meanconditioned2(u[i]), 30)
}
#building the data.fram with high order (4) and low order (2)
data1high<-data.frame(y1, u, u*u, u**3, u**4)
data1low<-data.frame(y1,u,u*u)
#fitting
modhigh<-glm(y1~.  , family= gaussian, data=data1high)
modlow<-glm(y1~.  , family= gaussian, data=data1low)
#Showing the summary
summary(modhigh) #
summary(modlow)
modhigh.Residual
modhigh
methods(class="summary.glm")
?methods(class="summary.glm")
?methods(class="summary.glm")
modhigh$coefficients
modhigh$residuals
sum(abs(modhigh$residuals)**2)
hist.FD(modhig$residuals)
hist.FD(modhigh$residuals)
hist.FD(modlow$residuals)
modhigh$fitted.values
modhigh$effects
modhigh$aic
modhigh$call
#Redoing with meanconditioned2 N=5 times and taking the sum of AIC and Residual dev values.
AIChigh<-0
AIClow<-0
Resdevhigh<-0
Resdevlow<-0
#Redoing with meanconditioned2 N=5 times and taking the sum of AIC and Residual dev values.
AIChigh<-0
AIClow<-0
Resdevhigh<-0
Resdevlow<-0
N<-5
y2<-x
for(i in 1:N){
#calculating the conditional distribution with meanconditioned1
for (i in 1:n){
y2[i]<- rnorm(1, mean=meanconditioned1(u[i]), 30)
}
#building the data.fram with high order (4) and low order (2)
data1high<-data.frame(y, u, u*u, u**3, u**4)
data1low<-data.frame(y,u,u*u)
#fitting
modhigh<-glm(y2~.  , family= gaussian, data=data1high)
modlow<--glm(y2~.  , family= gaussian, data=data1low)
#Showing the summary
summary(modhigh)
summary(modlow)
AIChigh<-AIChigh+modhigh$aic
AIClow<-AIClow+modlow$aic
Resdevhigh<- Resdevhigh+sum(abs(modhigh$residuals)**2)
Resdevlow<- Resdevlow+sum(abs(modlow$residuals)**2)
}
#calculating the conditional distribution with meanconditioned1
for (i in 1:n){
y2[i]<- rnorm(mean=meanconditioned1(u[i]), 30)
}
meanconditioned1(u[i])
?rnorm
y2[i]<- rnorm(1,mean=meanconditioned1(u[i]), 30)
y2[i]<- rnorm(n=1, mean=meanconditioned1(u[i]), 30)
y2
y2<-u
for(i in 1:N){
#calculating the conditional distribution with meanconditioned1
for (i in 1:n){
y2[i]<- rnorm(n=1, mean=meanconditioned1(u[i]), 30)
}
#building the data.fram with high order (4) and low order (2)
data1high<-data.frame(y, u, u*u, u**3, u**4)
data1low<-data.frame(y,u,u*u)
#fitting
modhigh<-glm(y2~.  , family= gaussian, data=data1high)
modlow<--glm(y2~.  , family= gaussian, data=data1low)
#Showing the summary
summary(modhigh)
summary(modlow)
AIChigh<-AIChigh+modhigh$aic
AIClow<-AIClow+modlow$aic
Resdevhigh<- Resdevhigh+sum(abs(modhigh$residuals)**2)
Resdevlow<- Resdevlow+sum(abs(modlow$residuals)**2)
}
for(i in 1:N){
#calculating the conditional distribution with meanconditioned1
for (i in 1:n){
y2[i]<- rnorm(n=1, mean=meanconditioned1(u[i]), 30)
}
#building the data.fram with high order (4) and low order (2)
data1high<-data.frame(y, u, u*u, u**3, u**4)
data1low<-data.frame(y,u,u*u)
#fitting
modhigh<-glm(y2~.  , family= gaussian, data=data1high)
modlow<-glm(y2~.  , family= gaussian, data=data1low)
#Showing the summary
summary(modhigh)
summary(modlow)
AIChigh<-AIChigh+modhigh$aic
AIClow<-AIClow+modlow$aic
Resdevhigh<- Resdevhigh+sum(abs(modhigh$residuals)**2)
Resdevlow<- Resdevlow+sum(abs(modlow$residuals)**2)
}
AIChigh
AIClow
Resdevhigh
Resdevlow
#Redoing with meanconditioned2 N=5 times and taking the sum of AIC and Residual dev values.
AIChigh<-0
AIClow<-0
Resdevhigh<-0
Resdevlow<-0
N<-5
y2<-u
for(i in 1:N){
#calculating the conditional distribution with meanconditioned1
for (i in 1:n){
y2[i]<- rnorm(n=1, mean=meanconditioned1(u[i]), 30)
}
#building the data.fram with high order (4) and low order (2)
data1high<-data.frame(y, u, u*u, u**3, u**4)
data1low<-data.frame(y,u,u*u, u**3)
#fitting
modhigh<-glm(y2~.  , family= gaussian, data=data1high)
modlow<-glm(y2~.  , family= gaussian, data=data1low)
#Showing the summary
summary(modhigh)
summary(modlow)
AIChigh<-AIChigh+modhigh$aic
AIClow<-AIClow+modlow$aic
Resdevhigh<- Resdevhigh+sum(abs(modhigh$residuals)**2)
Resdevlow<- Resdevlow+sum(abs(modlow$residuals)**2)
}
AIChigh
AIClow
Resdevhigh
Resdevlow
?cv.glmnet
?glmnet
(0.457^2)/(1-0.457^2)
(0.457**2)/(1-0.457**2)
(0.457**2)/(1-0.457**2)
(0.457**2)
(0.457**2)/(1-0.2)
(0.457**2)/(1-0.2)*54
cat("\014")  # ctrl+L, clear console
rm(list = ls()) #clear environment
dev.off(dev.list()["RStudioGD"]) #clear all plots
library(pacman)
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes,
ggvis, lubridate, rmarkdown, shiny,
stringr, tidyr, rpart, rpart.plot,MASS,
randomForest, caret, TTR, forecast, lubridate,
MLmetrics,e1071, caTools, class, pROC)
exp(-1,2)/(1+exp(-1,2))
exp(-1.2)/(1+exp(-1.2))
0.17*2000+0.03+0.02*2000
-326+0.17*2000+309+0.02*2000
setwd("~/Desktop/Units/HPC/ex2/HPC_ex2")
setwd("~/Desktop/Units/HPC/ex2/HPC_ex2")
read.csv("2_double_mkl_EPYC.csv", sep=" ")
read.csv("2_double_mkl_EPYC.csv", sep=" ")
df=read.csv("2_double_mkl_EPYC.csv", sep=" ")
head(df)
head(df)
head(df)
setwd("~/Desktop/Units/HPC/ex2/HPC_ex2")
df=read.csv("2_double_mkl_EPYC.csv", sep=" ")
head(df)
View(df)
df=read.csv("2_double_mkl_EPYC.csv")
head(df)
View(df)
df=read.csv("2_double_mkl_EPYC.csv", header = FALSE)
head(df)
View(df)
colnames(df1) <- c(“type_data”, “time”, “matrixes_dimension”, “Flops”)
colnames(df1) <-c(“type_data”, “time”, “matrixes_dimension”, “Flops”)
colnames(df1) <-c('type_data', 'time', 'matrixes_dimension', 'Flops')
df1=read.csv("2_double_mkl_EPYC.csv", header = FALSE)
colnames(df1) <-c('type_data', 'time', 'matrixes_dimension', 'Flops')
head(df)
head(df1)
colnames(df1) <-c('type_data', 'time', 'matrx_dim', 'Flops')
head(df1)
colnames(df1) <-c('type_data', 'time', 'dimension', 'Flops')
head(df1)
View(df)
df1[df1$dimension==2000]
colnames(df1) <-c('type_data', 'time', 'dimension', 'Flops')
df1[df1$dimension==2000]
library(dplyr)
dplyr::filter(df1, dimension==2000)
N<-10
t=c()
f=c()
x= seq(from=2000, to= 20000, by=2000)
for (i in 1:N){
auxdf<-dplyr::filter(df1, dimension==2000*i)
t[i]<-mean(auxdf$time)
f[i]<-mean(auxdf$Flops)
}
plot(x,t)
plot(x,f)
plot(x,t)
plot(x,f)
plot(x,t, main = "Double mkl Epyc", xlab="Dimension square matrixes", ylab="GFlops")
plot(x,t, main = "Double mkl Epyc", sub="default policy" xlab="Dimension square matrixes", ylab="GFlops")
plot(x,t, main = "Double mkl Epyc", sub="default policy", xlab="Dimension square matrixes", ylab="GFlops")
plot(x,t, main = "Double mkl Epyc", sub="Default policy", xlab="Dimension square matrixes", ylab="GFlops")
plot(x,t, main = "Double mkl Epyc Default policy", xlab="Dimension square matrixes", ylab="GFlops")
plot(x,t, main = "Double, mkl, Epyc, Default policy", xlab="Dimension square matrixes", ylab="GFlops")
plot(x,fmain = "Double, mkl, Epyc, Default policy", xlab="Dimension square matrixes", ylab="Time (s)")
plot(x,f,main = "Double, mkl, Epyc, Default policy", xlab="Dimension square matrixes", ylab="Time (s)")
plot(x,f,main = "Double, mkl, Epyc, Default policy", xlab="Dimension square matrixes", ylab="Time (ms)")
xyplot(x~t+f)
library(lattice)
library(devtools)
xyplot(x~t+f)
xyplot(t+f~x)
plot(x,t, main = "Double, mkl, Epyc, Default policy", xlab="Dimension square matrixes", ylab="GFlops")
plot(x,f,main = "Double, mkl, Epyc, Default policy", xlab="Dimension square matrixes", ylab="Time (ms)")
plot(x,t, main = "Double, mkl, Epyc, Default policy", xlab="Dimension square matrixes", ylab="GFlops")
xyplot(t+f~x)
xyplot(t+f~x,fill = c("black", "red") ,xlab="Dimension square matrixes", ylab="GFlops")
xyplot(t+f~x,fill = c("black", "red") ,xlab="Dimension square matrixes", ylab="GFlops")
xyplot(t+f~x,pch = 21 ,fill = c("black", "red") ,xlab="Dimension square matrixes", ylab="GFlops")
xyplot(t+f~x, pch = 21 ,fill = c("black", "red"), cex = 1 ,xlab="Dimension square matrixes", ylab="GFlops")
xyplot(t+f~x, pch = 21 ,fill = c("black", "green"), cex = 1 ,xlab="Dimension square matrixes", ylab="GFlops")
xyplot(t+f~x, pch = 21 ,fill = c("blue", "purple"), cex = 1 ,xlab="Dimension square matrixes", ylab="GFlops")
xyplot(t+f~x, pch = 21 ,fill = c("blue", "pink"), cex = 1 ,xlab="Dimension square matrixes", ylab="GFlops")
xyplot(t+f~x,"Double, mkl, Epyc, Default policy" ,pch = 21 ,fill = c("blue", "pink"), cex = 1 ,xlab="Dimension square matrixes", ylab="GFlops")
xyplot(t+f~x,main="Double, mkl, Epyc, Default policy" ,pch = 21 ,fill = c("blue", "pink"), cex = 1 ,xlab="Dimension square matrixes", ylab="GFlops")
'xyplot'
?xyplot
library(lattice)
library(dplyr)
?xyplot
df1=read.csv("2_double_mkl_EPYC.csv", header = FALSE)
colnames(df1) <-c('type_data', 'time', 'dimension', 'GFlops')
N<-10
t1=c()
f1=c()
x= seq(from=2000, to= 20000, by=2000)
for (i in 1:N){
auxdf<-dplyr::filter(df1, dimension==2000*i)
t1[i]<-mean(auxdf$time)
f1[i]<-mean(auxdf$GFlops)
}
df2=read.csv("2_double_oblas_EPYC.csv", header = FALSE)
colnames(df1) <-c('type_data', 'time', 'dimension', 'GFlops')
N<-10
t2=c()
f2=c()
x= seq(from=2000, to= 20000, by=2000)
df2=read.csv("2_double_oblas_EPYC.csv", header = FALSE)
colnames(df1) <-c('type_data', 'time', 'dimension', 'GFlops')
N<-10
t2=c()
f2=c()
x= seq(from=2000, to= 20000, by=2000)
for (i in 1:N){
auxdf<-dplyr::filter(df2, dimension==2000*i)
t2[i]<-mean(auxdf$time)
f2[i]<-mean(auxdf$GFlops)
}
#plot(x,t, main = "Double, mkl, Epyc, Default policy", xlab="Dimension square matrixes", ylab="GFlops")
#plot(x,f,main = "Double, mkl, Epyc, Default policy", xlab="Dimension square matrixes", ylab="Time (ms)")
xyplot(t1+t2~x,main="Double, mkl, Epyc, Default policy" ,pch = 21 ,fill = c("blue", "pink"), cex = 1 ,xlab="Dimension square matrixes", ylab="Time (ms)")
xyplot(f1+f2~x,main="Double, mkl, Epyc, Default policy" ,pch = 21 ,fill = c("blue", "pink"), cex = 1 ,xlab="Dimension square matrixes", ylab="GFlops")
#plot(x,t, main = "Double, mkl, Epyc, Default policy", xlab="Dimension square matrixes", ylab="GFlops")
#plot(x,f,main = "Double, mkl, Epyc, Default policy", xlab="Dimension square matrixes", ylab="Time (ms)")
xyplot(t1+t2~x,main="Double, mkl, Epyc, Default policy" ,pch = 21 ,fill = c("blue", "pink"), cex = 1 ,xlab="Dimension square matrixes", ylab="Time (ms)")
t2
df2=read.csv("2_double_oblas_EPYC.csv", header = FALSE)
colnames(df1) <-c('type_data', 'time', 'dimension', 'GFlops')
N<-10
t2=c()
f2=c()
x= seq(from=2000, to= 20000, by=2000)
df2
for (i in 1:N){
auxdf<-dplyr::filter(df2, dimension==2000*i)
t2[i]<-mean(auxdf$time)
f2[i]<-mean(auxdf$GFlops)
}
colnames(df2) <-c('type_data', 'time', 'dimension', 'GFlops')
N<-10
t2=c()
f2=c()
x= seq(from=2000, to= 20000, by=2000)
for (i in 1:N){
auxdf<-dplyr::filter(df2, dimension==2000*i)
t2[i]<-mean(auxdf$time)
f2[i]<-mean(auxdf$GFlops)
}
#plot(x,t, main = "Double, mkl, Epyc, Default policy", xlab="Dimension square matrixes", ylab="GFlops")
#plot(x,f,main = "Double, mkl, Epyc, Default policy", xlab="Dimension square matrixes", ylab="Time (ms)")
xyplot(t1+t2~x,main="Double, mkl, Epyc, Default policy" ,pch = 21 ,fill = c("blue", "pink"), cex = 1 ,xlab="Dimension square matrixes", ylab="Time (ms)")
#plot(x,t, main = "Double, mkl, Epyc, Default policy", xlab="Dimension square matrixes", ylab="GFlops")
#plot(x,f,main = "Double, mkl, Epyc, Default policy", xlab="Dimension square matrixes", ylab="Time (ms)")
xyplot(t1+t2~x,main="Double, Epyc, Default policy" ,
pch = 21 ,fill = c("blue", "pink"), cex = 1 ,
xlab="Dimension square matrixes", ylab="Time (ms)")
legend("topleft", c("mean", "5th and 95th percentiles"), lty = c(1, 3), col = c(1,
2), lwd = 3)
#plot(x,t, main = "Double, mkl, Epyc, Default policy", xlab="Dimension square matrixes", ylab="GFlops")
#plot(x,f,main = "Double, mkl, Epyc, Default policy", xlab="Dimension square matrixes", ylab="Time (ms)")
xyplot(t1+t2~x,main="Double, Epyc, Default policy" ,
pch = 21 ,fill = c("blue", "pink"), cex = 1 ,
xlab="Dimension square matrixes", ylab="Time (ms)",
auto.key=list(x=0.05,y=0.95,text=c("mean","5th and 95th percentiles"),
points=FALSE, lines=TRUE, col=c(1,2)))
#plot(x,t, main = "Double, mkl, Epyc, Default policy", xlab="Dimension square matrixes", ylab="GFlops")
#plot(x,f,main = "Double, mkl, Epyc, Default policy", xlab="Dimension square matrixes", ylab="Time (ms)")
xyplot(t1+t2~x,main="Double, Epyc, Default policy" ,
pch = 21 ,fill = c("blue", "pink"), cex = 1 ,
xlab="Dimension square matrixes", ylab="Time (ms)",
auto.key=list(x=0.05,y=0.95, text=c("mkl","oblas"),
points=TRUE, col=c(1,2)))
xyplot(f1+f2~x,main="Double, Epyc, Default policy" ,pch = 21 ,
fill = c("blue", "pink"), cex = 1 ,
xlab="Dimension square matrixes", ylab="GFlops",
auto.key=list(x=0.05,y=0.95, text=c("mkl","oblas"),
points=TRUE, col=c(1,2)))
xyplot(f1+f2~x,main="Double, Epyc, Default policy" ,pch = 21 ,
fill = c("blue", "pink"), cex = 1 ,
xlab="Dimension square matrixes", ylab="GFlops",
auto.key=list(x=0.05,y=0.95, text=c("mkl","oblas"),
points=TRUE, col=c(1,2)))
#plot(x,t, main = "Double, mkl, Epyc, Default policy", xlab="Dimension square matrixes", ylab="GFlops")
#plot(x,f,main = "Double, mkl, Epyc, Default policy", xlab="Dimension square matrixes", ylab="Time (ms)")
xyplot(t1+t2~x,main="Double, Epyc, Default policy" ,
pch = 21 ,fill = c("blue", "pink"), cex = 1 ,
xlab="Dimension square matrixes", ylab="Time (ms)",
auto.key=list(x=0.05, y=0.95, text=c("mkl","oblas"),
points=TRUE, col=c(1,2)))
xyplot(f1+f2~x,main="Double, Epyc, Default policy" ,pch = 21 ,
fill = c("blue", "pink"), cex = 1 ,
xlab="Dimension square matrixes", ylab="GFlops",
auto.key=list(x=0.05,y=0.95, text=c("mkl","oblas"),
points=TRUE, col=c(1,2)))
